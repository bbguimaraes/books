(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment start end) (cons start end))
(define (start-segment l) (car l))
(define (end-segment l) (cdr l))

(define (midpoint-segment l)
  (let ((start (start-segment l)) (end (end-segment l)))
    (let ((xstart (x-point start))
          (ystart (y-point start))
          (xend (x-point end))
          (yend (y-point end)))
      (make-point (+ xstart (/ (- xend xstart) 2))
                  (+ ystart (/ (- yend ystart) 2))))))

(define (print-point p)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define (print-line l)
  (print-point (start-segment l))
  (display " -> ")
  (print-point (end-segment l)))

(define l1 (make-segment (make-point 0 0) (make-point 2 4)))
(print-line l1)
(newline)
(print-point (midpoint-segment l1))
(newline)

(define l2 (make-segment (make-point 3 1) (make-point 4 1)))
(print-line l2)
(newline)
(print-point (midpoint-segment l2))
(newline)
