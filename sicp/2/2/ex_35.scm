(define (count-leaves x)
  (cond ((null? x) 0)
        ((not (pair? x)) 1)
        (else (+ (count-leaves (car x))
                 (count-leaves (cdr x))))))

(define x (cons (list 1 2) (list 3 4)))
(display (length x))
(newline)
(display (count-leaves x))
(newline)

(display (list x x))
(newline)
(display (length (list x x)))
(newline)
(display (count-leaves (list x x)))
(newline)

(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))

(define (count-leaves t)
  (accumulate + 0 (map (lambda (sub-tree)
                         (if (pair? sub-tree)
                           (count-leaves sub-tree)
                           1))
                       t)))

(newline)
(display (length x))
(newline)
(display (count-leaves x))
(newline)

(display (list x x))
(newline)
(display (length (list x x)))
(newline)
(display (count-leaves (list x x)))
(newline)
