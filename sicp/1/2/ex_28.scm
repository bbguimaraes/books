(define (expmod base exp m)
  (define (squaremod-with-check x)
    (define (check-nontrivial x s)
      (if (and (= s 1) (not (= x 1)) (not (= x (- m 1))))
           0 s))
    (check-nontrivial x (remainder (square x) m)))
  (cond ((= exp 0) 1)
        ((even? exp) (squaremod-with-check (expmod base (/ exp 2) m)))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (define (test-expmod x)
      (and (not (= x 0)) (= x 1)))
    (test-expmod (expmod a (- n 1) n)))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n)
  (define (test-prime-iter i)
    (cond ((= i 0) true)
          ((miller-rabin-test n) (test-prime-iter (- i 1)))
          (else false)))
  (test-prime-iter 100))

(display "non-primes: ")
(display (fast-prime? 561))
(display " ")
(display (fast-prime? 1105))
(display " ")
(display (fast-prime? 1729))
(display " ")
(display (fast-prime? 2465))
(display " ")
(display (fast-prime? 2821))
(display " ")
(display (fast-prime? 6601))
(newline)

(display "primes: ")
(display (fast-prime? 2))
(display " ")
(display (fast-prime? 5))
(display " ")
(display (fast-prime? 13))
(display " ")
(display (fast-prime? 37))
(display " ")
(display (fast-prime? 1009))
(display " ")
(display (fast-prime? 10009))
(newline)
