(define (accumulate combiner null-value term a next b)
  (if (> a b)
    null-value
    (combiner (term a) (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))

(define (inc n) (+ n 1))
(define (identity x) x)
(define (cube x) (* x x x))

(define (sum-integers a b)
  (sum identity a inc b))

(define (sum-cubes a b)
  (sum cube a inc b))

(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (factorial n)
  (product identity 1 inc n))

(define (pi-product n)
  (define (term x)
    (define (result n d)
      (/ n d))
    (if (odd? x) (result (+ x 1) (+ x 2))
                 (result (+ x 2) (+ x 1))))
  (* (product term 1.0 inc n)
     4.0))

(display (sum-integers 1 10))
(newline)
(display (sum-cubes 1 10))
(newline)
(display (* 8 (pi-sum 1 1000)))
(newline)
(display (integral cube 0 1 0.01))
(newline)
(display (integral cube 0 1 0.001))
(newline)
(display (factorial 6))
(newline)
(display (pi-product 100.0))
(newline)
(display (pi-product 1000.0))
(newline)

(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (combiner (term a) result))))
  (iter a null-value))

(newline)
(display (sum-integers 1 10))
(newline)
(display (sum-cubes 1 10))
(newline)
(display (* 8 (pi-sum 1 1000)))
(newline)
(display (integral cube 0 1 0.01))
(newline)
(display (integral cube 0 1 0.001))
(newline)
(display (factorial 6))
(newline)
(display (pi-product 100.0))
(newline)
(display (pi-product 1000.0))
(newline)
